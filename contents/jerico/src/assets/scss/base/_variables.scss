@use "sass:meta";
@use "sass:math";
@use "sass:string";

//---width---//

$w-sp: 375px;
$w-pc: $w-sp * 2;

//---responsive---//

$bp: $w-pc;

@mixin spView($breakpoint: $bp) {
  @media (max-width: ($breakpoint)) {
    @content;
  }
}

@mixin pcView($breakpoint: $bp) {
  @media (min-width: ($breakpoint)) {
    @content;
  }
}

//---function---//

// px → vw変換
@function px_vw($val, $width: $w-pc, $sp-width: $w-sp) {
  $vw: math.div(strip-unit($val), strip-unit($width)) * 100;

  // SP画面の場合、SP画面用の幅で再計算
  @if $width == $sp-width {
    $vw: math.div(strip-unit($val), strip-unit($sp-width)) * 100;
  }

  @if $vw > 0 {
    @return min(string.unquote($vw + vw), $val);
  } @else {
    @return max(string.unquote($vw + vw), $val);
  }
}

// 数値から単位を取り除く
@function strip-unit($number) {
  @if meta.type-of($number) == "number" and not math.is-unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}

// SCSS変数に格納
$fs-ttl: px_vw(62.21px);
$fs-base: px_vw(30px);
$fs-story: px_vw(43.2px);
$fs-subttl: px_vw(25px);
$fs-min: px_vw(20.83px);

$w-content: px_vw(1200px);

:root {
  /* カラー
	--------------------------------------------------------------*/
  --c-primary: #d3d3d3;

  /* 背景カラー
	--------------------------------------------------------------*/
  --bgc-dark: #1a1a2e;

  /* フォント
	--------------------------------------------------------------*/
  --ff-base: "Noto Sans JP", sans-serif;
  --ff-serif: "Noto Serif JP", "YuMincho", "Hiragino Mincho ProN", "Yu Mincho",
    "MS PMincho", serif;

  /* サイズ
	--------------------------------------------------------------*/

  //max-width
  --w-content: #{$w-content};

  //font
  --fs-ttl: #{$fs-ttl};
  --fs-base: #{$fs-base};
  --fs-story: #{$fs-story};
  --fs-subttl: #{$fs-subttl};
  --fs-min: #{$fs-min};
}
